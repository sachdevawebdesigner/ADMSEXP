const jwt = require("jsonwebtoken");
require("dotenv").config();

// Middleware to verify JWT token
function verifyToken(req, res, next) {
  const authHeader = req.headers["authorization"];
  const token = authHeader && authHeader.split(" ")[1];

  if (!token) return res.status(403).json({ message: "Token required" });

  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
    if (err) return res.status(401).json({ message: "Invalid or expired token" });
    req.user = user;
    next();
  });
}

// Middleware to check user roles
function authorizeRoles(...roles) {
  return (req, res, next) => {
    if (!roles.includes(req.user.role)) {
      return res
        .status(403)
        .json({ message: "Access denied: insufficient permissions" });
    }
    next();
  };
}

module.exports = { verifyToken, authorizeRoles };
ðŸ§  Step 4 â€” server.js
javascript
Copy code
const express = require("express");
const jwt = require("jsonwebtoken");
const bcrypt = require("bcryptjs");
require("dotenv").config();

const { verifyToken, authorizeRoles } = require("./middleware/authMiddleware");

const app = express();
app.use(express.json());

// Mock users (In real life, store in database)
const users = [
  { id: 1, username: "adminUser", password: "admin123", role: "Admin" },
  { id: 2, username: "moderatorUser", password: "mod123", role: "Moderator" },
  { id: 3, username: "regularUser", password: "user123", role: "User" },
];

// Hash passwords before starting
users.forEach((user) => {
  user.password = bcrypt.hashSync(user.password, 10);
});

// -------------------- LOGIN ROUTE --------------------
app.post("/login", (req, res) => {
  const { username, password } = req.body;

  const user = users.find((u) => u.username === username);
  if (!user) return res.status(404).json({ message: "User not found" });

  const validPassword = bcrypt.compareSync(password, user.password);
  if (!validPassword) return res.status(401).json({ message: "Invalid password" });

  // Create JWT token
  const token = jwt.sign(
    { id: user.id, username: user.username, role: user.role },
    process.env.JWT_SECRET,
    { expiresIn: "1h" }
  );

  res.json({
    message: "Login successful",
    token,
    role: user.role,
  });
});

// -------------------- PROTECTED ROUTES --------------------

// Accessible by all authenticated users
app.get("/profile", verifyToken, (req, res) => {
  res.json({
    message: `Welcome ${req.user.username}!`,
    role: req.user.role,
  });
});

// Admin only
app.get("/admin", verifyToken, authorizeRoles("Admin"), (req, res) => {
  res.json({ message: "Welcome to the Admin dashboard!" });
});

// Moderator only
app.get("/moderator", verifyToken, authorizeRoles("Moderator"), (req, res) => {
  res.json({ message: "Welcome to the Moderator management page!" });
});

// Admin or Moderator
app.get(
  "/manage",
  verifyToken,
  authorizeRoles("Admin", "Moderator"),
  (req, res) => {
    res.json({ message: "You have management access." });
  }
);

// Default route
app.get("/", (req, res) => {
  res.send("Role-Based Access Control API is running ðŸš€");
});

// Start server
app.listen(process.env.PORT, () => {
  console.log(`Server running on port ${process.env.PORT}`);
});
