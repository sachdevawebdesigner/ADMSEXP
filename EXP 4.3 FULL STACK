// Import express
const express = require("express");
const app = express();
const PORT = 3000;

app.use(express.json());

// ----------------------------------
// DATA STRUCTURE: SEATS IN MEMORY
// ----------------------------------
let seats = [];

// Initialize 10 seats as "available"
for (let i = 1; i <= 10; i++) {
  seats.push({
    id: i,
    status: "available", // available | locked | booked
    lockedBy: null,
    lockTime: null,
  });
}

// Lock duration (1 minute)
const LOCK_DURATION = 60 * 1000;

// ----------------------------------
// HELPER FUNCTION: RELEASE EXPIRED LOCKS
// ----------------------------------
function releaseExpiredLocks() {
  const now = Date.now();
  seats.forEach(seat => {
    if (seat.status === "locked" && now - seat.lockTime >= LOCK_DURATION) {
      seat.status = "available";
      seat.lockedBy = null;
      seat.lockTime = null;
    }
  });
}

// ----------------------------------
// ROUTES
// ----------------------------------

// View all seats
app.get("/seats", (req, res) => {
  releaseExpiredLocks();
  res.json(seats);
});

// Lock a seat for a user
app.post("/lock/:id", (req, res) => {
  releaseExpiredLocks();
  const seatId = parseInt(req.params.id);
  const user = req.body.user || "anonymous";

  const seat = seats.find(s => s.id === seatId);
  if (!seat) return res.status(404).json({ message: "Seat not found" });

  if (seat.status === "booked") {
    return res.status(400).json({ message: "Seat already booked" });
  }

  if (seat.status === "locked") {
    return res.status(400).json({ message: "Seat is currently locked by another user" });
  }

  seat.status = "locked";
  seat.lockedBy = user;
  seat.lockTime = Date.now();

  res.json({
    message: `Seat ${seatId} locked successfully by ${user}. Confirm within 1 minute.`,
    seat,
  });
});

// Confirm booking
app.post("/confirm/:id", (req, res) => {
  releaseExpiredLocks();
  const seatId = parseInt(req.params.id);
  const user = req.body.user || "anonymous";

  const seat = seats.find(s => s.id === seatId);
  if (!seat) return res.status(404).json({ message: "Seat not found" });

  if (seat.status === "booked") {
    return res.status(400).json({ message: "Seat already booked" });
  }

  if (seat.status !== "locked") {
    return res.status(400).json({ message: "Seat must be locked before confirmation" });
  }

  if (seat.lockedBy !== user) {
    return res.status(403).json({ message: "Seat locked by another user" });
  }

  seat.status = "booked";
  seat.lockedBy = null;
  seat.lockTime = null;

  res.json({ message: `Seat ${seatId} successfully booked by ${user}.`, seat });
});

// Optional: Release a locked seat manually
app.post("/release/:id", (req, res) => {
  releaseExpiredLocks();
  const seatId = parseInt(req.params.id);
  const user = req.body.user || "anonymous";

  const seat = seats.find(s => s.id === seatId);
  if (!seat) return res.status(404).json({ message: "Seat not found" });

  if (seat.status !== "locked" || seat.lockedBy !== user) {
    return res.status(400).json({ message: "Seat not locked by this user" });
  }

  seat.status = "available";
  seat.lockedBy = null;
  seat.lockTime = null;

  res.json({ message: `Seat ${seatId} released successfully by ${user}.`, seat });
});

// ----------------------------------
// START SERVER
// ----------------------------------
app.listen(PORT, () => {
  console.log(`üéüÔ∏è Ticket Booking Server running at http://localhost:${PORT}`);
});
